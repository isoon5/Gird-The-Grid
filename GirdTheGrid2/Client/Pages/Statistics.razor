@page "/statistics"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using GirdTheGrid2.Shared

@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime jsRunTime
<AuthorizeView>
    <Authorized>
       
        <div class="container border border-secondary overflow-auto" style="height: 350px;
        padding: 5px;
        margin-bottom: 10px;
        margin-left: auto;
        margin-right: auto;
        background: rgb(196,240,123);
        background: linear-gradient(56deg, rgba(196,240,123,0.846673703661152) 0%, rgba(245,241,55,0.8102591378348214) 35%, rgba(245,173,109,0.7794468129048494) 65%);
">
            
            <p1 class="lead">Insert a region name and see how many power stations there are and what is the total energy output</p1>
            <EditForm Model="@powerStationData" OnValidSubmit="@HandleValidSubmit">

                <ChildContent Context="context1">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <InputText class="form-control" id="RegionName" @bind-Value="powerStationData.RegionName" />

                        <button type="submit" class="btn-primary">Submit</button>
                    </div>
                </ChildContent>

            </EditForm>


            @if (statisticItem == null)
            {
                <p><em>Waiting...</em></p>
            }
            else
            {
                <p class="bg-primary">Region name:</p>
                <p class="bg-info"> @statisticItem.Region</p>
                <p class="bg-primary">Total power output:</p>
                <p class="bg-info"> @statisticItem.TotalPowerOutput</p>
                <p class="bg-primary">Number of stations:</p>
                <p class="bg-info"> @statisticItem.NumberOfStations</p>
            }
            <br />
            <br />
            <br />

        </div>

        <div class="container border border-secondary overflow-auto" style="        height: 550px;
        padding: 5px;
        margin-bottom: 10px;
        margin-left: auto;
        margin-right: auto;
        background: rgb(196,240,123);
        background: linear-gradient(56deg, rgba(196,240,123,0.846673703661152) 0%, rgba(245,241,55,0.8102591378348214) 35%, rgba(245,173,109,0.7794468129048494) 65%);
">
            <p2 class="lead">Choose a range and see which power stations have their energy output within that interval:</p2>
            <EditForm Model="@powerStationFilter">
                <ChildContent Context="context2">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <input type="range" min="0" max="10000" class="form-control-range" id="minOutput" @bind-value="powerStationFilter.minOutput">
                        <output id="minOutputValue">@powerStationFilter.minOutput</output>
                        <input type="range" min="0" max="10000" class="form-control-range" id="maxOutput" @bind-value="powerStationFilter.maxOutput">
                        <output id="maxOutputValue">@powerStationFilter.maxOutput</output>
                        <br />
                        @*<InputNumber id="minOutput" @bind-Value="powerStationFilter.minOutput" />
                    <InputNumber id="maxOutput" @bind-Value="powerStationFilter.maxOutput" />
                        *@
                        <button type="submit" class="btn-primary" @onclick="@(()=>HandleValidSubmit2(currentPage))">Submit</button>
                    </div>
                </ChildContent>
            </EditForm>


            @if (statisticItem2.items == null)
            {
                <p><em>Waiting...</em></p>
            }
            else
            {

                <table class="table" id="myTable">
                    <thead class="thead-dark">
                        <tr>
                            <th>Station Region</th>
                            <th>Station Name</th>
                            <th>Energy output</th>
                            <th>Station type</th>

                        </tr>
                    </thead>
                    <tbody class="table-striped table-hover">

                        @foreach (var item in statisticItem2.items)
                        {


                            <tr>
                                <td>@item.StationRegion</td>
                                <td>@item.StationName</td>
                                <td>@item.EnergyOutput</td>
                                <td>@item.StationType</td>

                            </tr>
                        }
                    </tbody>
                </table>
                <label bind="nav">@currentPage/@maxPages</label>

                if (currentPage > 1)
                {

                    <button class="btn-outline-info" @onclick="@(()=>HandleValidSubmit2(--currentPage))"> ← Previous </button>
                }

                if (currentPage < maxPages)
                {
                    <button class="btn-outline-info" @onclick="@(()=>HandleValidSubmit2(++currentPage))"> Next → </button>
                }
            }


            <br />
            <br />
            <br />
        </div>
        <div class="container border border-secondary overflow-auto" style="height: 550px;
        padding: 5px;
        margin-bottom: 10px;
        margin-left: auto;
        margin-right: auto;
        background: rgb(196,240,123);
        background: linear-gradient(56deg, rgba(196,240,123,0.846673703661152) 0%, rgba(245,241,55,0.8102591378348214) 35%, rgba(245,173,109,0.7794468129048494) 65%);
    ">
            <div id="chartdiv" style ="width: 100%; height: 500px;"></div>
            <p3 class="lead">Select a station Type and see all the powerStations that have that type </p3>



            <EditForm Model="@powerStationType">
                <ChildContent Context="context3">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @*<InputText id="stationType" @bind-Value="powerStationType.stationType" />*@
                    <InputSelect id="stationType" class="custom-select custom-select-lg" @bind-Value="powerStationType.stationType">
                        <option value="Solar" selected="selected">Solar </option>
                        <option value="Coal">Coal </option>
                        <option value="Gas">Gas</option>
                        <option value="Geothermal">Geothermal</option>
                        <option value="Wind">Wind</option>
                        <option value="Hydro">Hydro</option>
                        <option value="Diesel">Diesel</option>
                    </InputSelect>



                    <button type="submit" class="btn-primary" @onclick="@(()=>HandleValidSubmit3(currentPage1))">Submit</button>
                    <div id="chartdiv"></div>
                </ChildContent>
            </EditForm>


            @if (statisticItem3.items == null)
            {
                <p><em>Waiting...</em></p>
            }
            else
            {

                <table class="table" id="myTable2">
                    <thead class="thead-dark">
                        <tr>
                            <th>Station Region</th>
                            <th>Station Name</th>
                            <th>Energy output</th>
                            <th>Station type</th>

                        </tr>
                    </thead>
                    <tbody class="table-striped table-hover">

                        @foreach (var item in statisticItem3.items)
                        {


                            <tr>
                                <td>@item.StationRegion</td>
                                <td>@item.StationName</td>
                                <td>@item.EnergyOutput</td>
                                <td>@item.StationType</td>

                            </tr>
                        }
                    </tbody>
                </table>
                <label bind="nav">@currentPage1/@maxPages1</label>

                if (currentPage1 > 1)
                {

                    <button class="btn-outline-info" @onclick="@(()=>HandleValidSubmit3(--currentPage1))"> ← Previous </button>
                }

                if (currentPage1 < maxPages1)
                {
                    <button class="btn-outline-info" @onclick="@(()=>HandleValidSubmit3(++currentPage1))">Next → </button>
                }
            }
            <br />
            <br />
            <br />
        </div>
        <div class="container border border-secondary overflow-auto" style="height: 350px;
        padding: 5px;
        margin-bottom: 10px;
        margin-left: auto;
        margin-right: auto;
        background: rgb(196,240,123);
        background: linear-gradient(56deg, rgba(196,240,123,0.846673703661152) 0%, rgba(245,241,55,0.8102591378348214) 35%, rgba(245,173,109,0.7794468129048494) 65%);
">
            <p4>Search powerstation by name </p4>
            <EditForm Model="@searchPowerStation" OnValidSubmit="@HandleValidSubmit4">
                <ChildContent Context="context4">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <InputText class="form-control" id="StationName" @bind-Value="searchPowerStation.StationName" />

                    <button class="btn-primary" type="submit">Submit</button>
                </ChildContent>
            </EditForm>

            @if (statisticItem4.StationRegion == null)
            {
                <p><em>Waiting...</em></p>
            }

            else
            {
                <p class="bg-primary">Station name:</p>
                <p class="bg-info">@statisticItem4.StationName</p>
                <p class="bg-primary">Station Region:</p>
                <p class="bg-info"> @statisticItem4.StationRegion</p>
                <p class="bg-primary">Energy output:</p>
                <p class="bg-info"> @statisticItem4.EnergyOutput</p>
                <p class="bg-primary">Station type:</p>
                <p class="bg-info"> @statisticItem4.StationType</p>

            }
        </div>
        
        
    </Authorized>
    <NotAuthorized>
        Sorry you cannot see this
    </NotAuthorized>
</AuthorizeView>


@code {
    private PowerStationData powerStationData = new PowerStationData();
    private StationData statisticItem;
    private PowerStationFilter powerStationFilter = new PowerStationFilter();
    private Types statisticItem2=new Types();

    private PowerStationType powerStationType=new PowerStationType();
    private Types statisticItem3 = new Types();
    private SearchPowerStation searchPowerStation=new SearchPowerStation();
    private Filters statisticItem4 = new Filters();
    private int currentPage = 1;
    private int maxPages = 1;
    private int currentPage1 = 1;
    private int maxPages1 = 3;
    protected async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<PowerStationData>("statistics", powerStationData);
            statisticItem = await response.Content.ReadFromJsonAsync<StationData>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected async Task HandleValidSubmit2(int currPage)
    {
        try
        {
            powerStationFilter.currentPage = currPage;
            var response = await Http.PostAsJsonAsync<PowerStationFilter>("statistics2", powerStationFilter);
            statisticItem2.items = new List<Filters>();
            statisticItem2 = await response.Content.ReadFromJsonAsync<Types>();
            maxPages = statisticItem2.maxPages;

            /*foreach (var item in statisticItem2.items)
                Console.WriteLine(item.StationName);*/
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    protected async Task HandleValidSubmit3(int currPage)
    {
        try
        {
            powerStationType.currentPage = currPage;
            var response = await Http.PostAsJsonAsync<PowerStationType>("statistics3", powerStationType);
            statisticItem3 = await response.Content.ReadFromJsonAsync<Types>();
            maxPages1 = statisticItem3.maxPages;
            /*foreach (var item in statisticItem3.items)
                Console.WriteLine(item.StationName);*/
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected async Task HandleValidSubmit4()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<SearchPowerStation>("statistics4", searchPowerStation);
            statisticItem4 = await response.Content.ReadFromJsonAsync<Filters>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    /*protected override async Task OnInitializedAsync()
    {
        try
        {
            statisticItem = await Http.GetFromJsonAsync<StationData>("/statistics");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }*/

} 
